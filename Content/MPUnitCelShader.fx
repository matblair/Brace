// these won't change in a given iteration of the shader
float4x4 World;
float4x4 View;
float4x4 Projection;
float4 cameraPos;
float4x4 worldInvTrp;

#define MAX_POINT_LIGHTS 3
// Our world lighting setups Will obviously need to be changed at a later 
// date in order to properly having moving light sources etc.

struct PointLight
{
	float Ka;
	float Kd;
	float Ks;
	float fallOffTop;
	float specN;
	float x;
	float y; 
	float z;
	float r;
	float g;
	float b;
	float a;
};

PointLight light;
//PointLight player;
//PointLight missile;

PointLight LightSources[MAX_POINT_LIGHTS];

int NumLights;


struct VS_IN
{
	float4 pos : SV_POSITION;
	float4 nrm : NORMAL;
};

struct PS_IN
{
	float4 pos : SV_POSITION; //Position in camera co-ords
	float4 col : COLOR;
	float4 wpos : TEXCOORD0; //Position in world co-ords
	float3 wnrm : TEXCOORD1; //Normal in world co-ords 
};


PS_IN VS( VS_IN input )
{
	PS_IN output = (PS_IN)0;

	// Convert Vertex position and corresponding normal into world coords
	// Note that we have to multiply the normal by the transposed inverse of the world 
	// transformation matrix (for cases where we have non-uniform scaling; we also don't
	// care about the "fourth" dimension, because translations don't affect the normal)
	output.wpos = mul(input.pos, World);
	output.wnrm = mul(input.nrm.xyz, (float3x3)worldInvTrp);
	// Transform vertex in world coordinates to camera coordinates
	float4 viewPos = mul(output.wpos, View);
    output.pos = mul(viewPos, Projection);
	// Just pass along the colour at the vertex
	output.col = float4(1,1,1,1);
	return output;
}

float4 PS( PS_IN input ) : SV_Target
{
	// Our interpolated normal might not be of length 1
	float3 interpNormal = normalize(input.wnrm);
	
	//PointLight lights[3];
	//lights[0] = sun;
	//lights[1] = player;
	//lights[2] = missile;

	//float4 colours[3];

	//for(int i=0; i<3; i++){	
	
	//PointLight light = LightSources[i];
	//First calculate the lamp
	// Calculate our distance lightwise.
	//float3 lightPntPos = float3(player.x,player.y,player.z);
	//float4 lightPntCol = float4(player.r, player.g, player.b, 1.0);
	float3 lightPntPos = float3(light.x,light.y,light.z);
	float4 lightPntCol = float4(light.r, light.g, light.b, 1.0);

	float dist = distance(lightPntPos.xyz,input.wpos.xyz);


	// Calculate ambient RGB intensities
	float Ka = light.Ka; // Very little ambient light generated by the lamp.
	float3 amb = input.col.rgb*lightPntCol.rgb*Ka;
	// Calculate diffuse RBG reflections
	float fAtt = light.fallOffTop/(dist+3); //Fall off with distance.
	float Kd = light.Kd; //All very flat diffuse reflections
	float3 L = normalize(lightPntPos.xyz - input.wpos.xyz);
	float LdotN = saturate(dot(L,interpNormal.xyz));
	float3 dif = fAtt*lightPntCol.rgb*Kd*input.col.rgb*LdotN;

	// Calculate specular reflections
	float Ks = light.Ks;
	float specN = light.specN; // Numbers>>1 give more mirror-like highlights
	float3 V = normalize(cameraPos.xyz - input.wpos.xyz);
	float3 R = normalize(2*LdotN*interpNormal.xyz - L.xyz);
	//float3 R = normalize(0.5*(L.xyz+V.xyz)); //Blinn-Phong equivalent
	float3 spe = fAtt*lightPntCol.rgb*Ks*pow(saturate(dot(V,R)),specN);

	// Combine components
	//colours[i] = float4(0.0f,0.0f,0.0f,0.0f);
	//colours[i].rgb = amb.rgb+dif.rgb+spe.rgb;

	//}

	//Now combine both light sources
	float4 returnCol = float4(0.0f,0.0f,0.0f,0.0f);
	returnCol.rgb = amb.rgb+dif.rgb+spe.rgb;//colours[0].rgb+ colours[1].rgb + colours[2].rgb;
	returnCol.a = input.col.a;
	
	float totalIntensity = 0.3126 * returnCol.r + 0.7152 * returnCol.g + 0.0722 * returnCol.b;

	// Now we will cel shade the rendering by discretizing the color
	if(totalIntensity >0.98 ) {
		returnCol = float4(1.0,1.0,1.0,1.0) * returnCol;
	} else if (totalIntensity > 0.80 ) {
		returnCol = float4(0.9,0.9,0.9,1.0) * returnCol;
	} else if (totalIntensity > 0.70) {
		returnCol = float4(0.85,0.85,0.85,1.0) * returnCol;
	} else if (totalIntensity > 0.50) {
		returnCol = float4(0.65,0.65,0.65,1.0) * returnCol;
	} else {
		returnCol = float4(0.5,0.5,0.5,1.0) * returnCol;
	}


	return returnCol;
}

technique Lighting
{
    pass Pass1
    {
		Profile = 9.3;
        VertexShader = VS;
        PixelShader = PS;
    }

}